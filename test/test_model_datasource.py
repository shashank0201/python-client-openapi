# coding: utf-8

"""
    Config Service

    Project and system config microservice  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import tech.client.config
from tech.client.config.models.datasource import Datasource  # noqa: E501
from tech.client.config.rest import ApiException

class TestDatasource(unittest.TestCase):
    """Datasource unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test Datasource
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = tech.client.config.models.datasource.Datasource()  # noqa: E501
        if include_optional :
            return Datasource(
                type = '0', 
                properties = tech.client.config.models.datasource_properties.Datasource_properties(
                    label = tech.client.config.models.datasource_properties_label.Datasource_properties_Label(
                        type = '0', 
                        default = '0', ), 
                    latest = tech.client.config.models.datasource_properties_latest.Datasource_properties_Latest(
                        type = '0', 
                        default = True, ), 
                    sources = tech.client.config.models.datasource_properties_sources.Datasource_properties_Sources(
                        title = '0', 
                        type = '0', 
                        items = tech.client.config.models.datasource_properties_sources_items.Datasource_properties_Sources_Items(
                            type = '0', 
                            properties = tech.client.config.models.datasource_properties_sources_items_properties.Datasource_properties_Sources_Items_properties( 
                                liveview_visible = tech.client.config.models.datasource_properties_sources_items_properties_liveview_visible.Datasource_properties_Sources_Items_properties_LiveviewVisible(
                                    type = '0', 
                                    title = '0', 
                                    description = '0', ), 
                                transit_path = tech.client.config.models.datasource_properties_sources_items_properties_id.Datasource_properties_Sources_Items_properties_Id(
                                    type = '0', 
                                    title = '0', ), 
                                transports = tech.client.config.models.datasource_properties_sources_items_properties_transports.Datasource_properties_Sources_Items_properties_Transports(
                                    type = '0', 
                                    title = '0', 
                                    items = tech.client.config.models.datasource_properties_sources_items_properties_transports_items.Datasource_properties_Sources_Items_properties_Transports_items(
                                        type = '0', ), ), ), ), ), )
            )
        else :
            return Datasource(
        )

    def testDatasource(self):
        """Test Datasource"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
